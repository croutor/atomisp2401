commit e4c386291660d25d69db296cc59a5792d502b07d
Author: Vincent Hervieux <vincent.hervieux@gmail.com>
Date:   Wed Jan 24 14:51:14 2018 +0100

    atomisp_gmin_platform : camera powered by external AXP PMIC
    
    Signed-off-by: Vincent Hervieux <vincent.hervieux@gmail.com>

diff --git a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
index 23d59288b0e0..7c3d2e7ed648 100644
--- a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
+++ b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
@@ -17,14 +17,12 @@
 
 #define MAX_SUBDEVS 8
 
+#define DEVNAME_PMIC_AXP "INT33F4:00"
+#define DEVNAME_PMIC_TI  "INT33F5:00"
+#define DEVNAME_PMIC_CRYSTALCOVE "INT33FD:00"
+
 #define VLV2_CLK_PLL_19P2MHZ 1 /* XTAL on CHT */
 #define VLV2_CLK_FREQ 19200000 /* 19,2MHz */
-#define ELDO1_SEL_REG	0x19
-#define ELDO1_1P8V	0x16
-#define ELDO1_CTRL_SHIFT 0x00
-#define ELDO2_SEL_REG	0x1a
-#define ELDO2_1P8V	0x16
-#define ELDO2_CTRL_SHIFT 0x01
 
 struct gmin_subdev {
 	struct v4l2_subdev *subdev;
@@ -230,6 +228,21 @@ static const struct gmin_cfg_var t100_vars[] = {
 	{},
 };
 
+static const struct gmin_cfg_var cht_cr_vars[] = {
+	/* For MRD front camera ov2680 with MRD default BIOS */
+	{ "OVTI2680:00_CamClk",          "2" },
+	{ "OVTI2680:00_ClkSrc",          "0" },
+	{ "OVTI2680:00_CsiPort",         "1" },
+	{ "OVTI2680:00_CsiLanes",        "1" },
+
+	/* For MRD rear camera ov2680 with MRD default BIOS */
+	{ "OVTI2680:01_CamClk",          "4" },
+	{ "OVTI2680:01_ClkSrc",          "0" },
+	{ "OVTI2680:01_CsiPort",         "0" },
+	{ "OVTI2680:01_CsiLanes",        "1" },
+	{},
+};
+
 static const struct gmin_cfg_var mrd7_vars[] = {
 	{"INT33F8:00_CamType", "1"},
 	{"INT33F8:00_CsiPort", "1"},
@@ -278,6 +291,7 @@ static const struct {
 } hard_vars[] = {
 	{ "BYT-T FFD8", ffrd8_vars },
 	{ "T100TA", t100_vars },
+	{ "Cherry Trail CR", cht_cr_vars },
 	{ "MRD7", mrd7_vars },
 	{ "ST70408", ecs7_vars },
 	{ "VTA0803", i8880_vars },
@@ -293,14 +307,32 @@ static const struct {
 #define GMIN_PMC_CLK_NAME 14 /* "pmc_plt_clk_[0..5]" */
 static char gmin_pmc_clk_name[GMIN_PMC_CLK_NAME];
 
+static int match_i2c_name(struct device *dev, void *name)
+{
+	return !strcmp(to_i2c_client(dev)->name, (char *)name);
+}
+
+static bool i2c_dev_exists(char *name)
+{
+	return !!bus_find_device(&i2c_bus_type, NULL, name, match_i2c_name);
+}
+
 static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 {
 	int i, ret;
 	struct device *dev;
 	struct i2c_client *client = v4l2_get_subdevdata(subdev);
 
-	if (!pmic_id)
-		pmic_id = PMIC_REGULATOR;
+	if (!pmic_id) {
+		if (i2c_dev_exists(DEVNAME_PMIC_AXP))
+			pmic_id = PMIC_AXP;
+		else if (i2c_dev_exists(DEVNAME_PMIC_TI))
+			pmic_id = PMIC_TI;
+		else if (i2c_dev_exists(DEVNAME_PMIC_CRYSTALCOVE))
+			pmic_id = PMIC_CRYSTALCOVE;
+		else
+			pmic_id = PMIC_REGULATOR;
+	}
 
 	if (!client)
 		return NULL;
@@ -466,6 +498,11 @@ static int gmin_v1p8_ctrl(struct v4l2_subdev *subdev, int on)
 			return regulator_disable(gs->v1p8_reg);
 	}
 
+	/* Handle by ACPI */
+	if (pmic_id == PMIC_AXP)
+		return 0;
+
+	pr_err("gmin_v1p8_ctrl failed.\n");
 	return -EINVAL;
 }
 
@@ -502,6 +539,11 @@ static int gmin_v2p8_ctrl(struct v4l2_subdev *subdev, int on)
 			return regulator_disable(gs->v2p8_reg);
 	}
 
+	/* Handle by ACPI */
+	if (pmic_id == PMIC_AXP)
+		return 0;
+
+	pr_err("gmin_v2p8_ctrl failed.\n");
 	return -EINVAL;
 }
 
