diff --git a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
index bf9f34b7ad72..ff260c5cb9ba 100644
--- a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
+++ b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
@@ -8,6 +8,7 @@
 #include <linux/delay.h>
 #include <media/v4l2-subdev.h>
 #include <linux/mfd/intel_soc_pmic.h>
+#include <linux/mfd/axp20x.h>
 #include <linux/regulator/consumer.h>
 #include <linux/gpio/consumer.h>
 #include <linux/gpio.h>
@@ -17,13 +18,54 @@
 
 #define MAX_SUBDEVS 8
 
+#define DEVNAME_PMIC_AXP "INT33F4:00"
+#define DEVNAME_PMIC_TI  "INT33F5:00"
+#define DEVNAME_PMIC_CRYSTALCOVE "INT33FD:00"
+
 #define VLV2_CLK_PLL_19P2MHZ 1 /* XTAL on CHT */
+
+/* X-Powers AXP288 register hackery */
+#define ALDO1_CTRL3_REG        0x13
+#define ALDO1_SEL_REG  0x28
+#define ALDO1_2P8V     0x15   //0x2a  default:0x16
+#define ALDO1_CTRL3_SHIFT 0x05
+
+#define ELDO_CTRL_REG   0x12
 #define ELDO1_SEL_REG	0x19
+#define ELDO1_1P6V	0x12
 #define ELDO1_1P8V	0x16
 #define ELDO1_CTRL_SHIFT 0x00
 #define ELDO2_SEL_REG	0x1a
 #define ELDO2_1P8V	0x16
 #define ELDO2_CTRL_SHIFT 0x01
+#define FLDO_CTRL_REG   0x13
+#define FLDO2_SEL_REG  0x1d
+#define FLDO2_1P2V      0x0a
+#define FLDO2_CTRL_SHIFT 0x3
+
+/* TI SND9039 PMIC register hackery */
+#define LDO9_REG      0x49
+#define LDO10_REG     0x4a
+#define LDO11_REG     0x4b
+
+#define LDO_2P8V_ON   0x2f /* 0x2e selects 2.85V ...      */
+#define LDO_2P8V_OFF  0x2e /* ... bottom bit is "enabled" */
+
+#define LDO_1P8V_ON   0x59 /* 0x58 selects 1.80V ...      */
+#define LDO_1P8V_OFF  0x58 /* ... bottom bit is "enabled" */
+
+/* CRYSTAL COVE PMIC register hackery */
+#define CRYSTAL_1P8V_REG        0x57
+#define CRYSTAL_2P8V_REG        0x5d
+#define CRYSTAL_ON      0x63
+#define CRYSTAL_OFF     0x62
+
+/*Whiskey Cove reg*/
+#define WCOVE_V1P8SX_CTRL     0x57
+#define WCOVE_V2P8SX_CTRL     0x5d
+#define WCOVE_CTRL_MASK               0x7
+#define WCOVE_CTRL_ENABLE     0x2
+#define WCOVE_CTRL_DISABLE    0x0
 
 struct gmin_subdev {
 	struct v4l2_subdev *subdev;
@@ -45,6 +87,9 @@ struct gmin_subdev {
 	bool v2p8_on;
 	bool v1p2_on;
 	bool v2p8_vcm_on;
+	int eldo1_sel_reg, eldo1_1p8v, eldo1_ctrl_shift;
+	int eldo2_sel_reg, eldo2_1p8v, eldo2_ctrl_shift;
+	int fldo2_sel_reg,fldo2_1p2v,fldo2_ctrl_shift;
 };
 
 static struct gmin_subdev gmin_subdevs[MAX_SUBDEVS];
@@ -100,6 +145,220 @@ const struct atomisp_camera_caps *atomisp_get_default_camera_caps(void)
 }
 EXPORT_SYMBOL_GPL(atomisp_get_default_camera_caps);
 
+enum {
+	I2C_BUS_0 = 0,
+	I2C_BUS_1,
+	I2C_BUS_2,
+} I2C_BUS_NR;
+
+/* Not used yet */
+//static struct i2c_board_info board_info[3];
+
+struct atomisp_camera_cht_table {
+	const char   *acpi_match_name;
+	const char   *subdev_match_name;
+	const char   *dev_name;
+	const char   *i2c_dev_name;
+	unsigned char i2c_addr;
+	unsigned char flags;
+};
+
+static struct atomisp_camera_cht_table cht_cam_comp_tab[] = {
+	/* OV8858 */
+	{"i2c-INT3477:00",  "INT3477:00",  "rear", "i2c-rear:10", 0x10, 0x00},
+	/* OV5648 */
+	{"i2c-INT3477:00",  "INT3477:00",  "rear",  "i2c-rear:36",  0x36, 0x00},
+	//	{"i2c-OVTI2680:01", "OVTI2680:01", "rear", "i2c-rear:36", 0x36, 0x00},
+	{"i2c-OVTI2680:00", "OVTI2680:00", "front", "i2c-front:10", 0x10, 0x00},
+	/* GC2355 */
+	{"i2c-GCTI2355:00", "GCTI2355:00", "front", "i2c-front:3c", 0x3c, 0x00},
+	/* GC0310 */
+//	{"i2c-INT0310:00", "INT0310:00", "front", "i2c-front:21", 0x21, 0x00}
+};
+
+
+/* Using some arbitary limit for max adresses in resource */
+#define MAX_CRS_ELEMENTS	20
+struct i2c_resource_info {
+	//struct i2c_comp_address addrs[MAX_CRS_ELEMENTS];
+	int count;
+	int common_irq;
+	unsigned long irq_flags;
+};
+
+/*
+ * Copy from i2c-core.c;
+ */
+// static int atomisp_acpi_i2c_add_resource(struct acpi_resource *ares, void *data)
+// {
+// 	struct i2c_resource_info *rcs_info = data;
+// 	struct acpi_resource_i2c_serialbus *sb;
+// 	struct resource r;
+
+// 	if (ares->type == ACPI_RESOURCE_TYPE_SERIAL_BUS) {
+// 		sb = &ares->data.i2c_serial_bus;
+// 		if (sb->type == ACPI_RESOURCE_SERIAL_TYPE_I2C) {
+// 			if (rcs_info->count >= MAX_CRS_ELEMENTS)
+// 				return 1;
+// 			rcs_info->addrs[rcs_info->count].addr =
+// 							sb->slave_address;
+// 			if (sb->access_mode == ACPI_I2C_10BIT_MODE)
+// 				rcs_info->addrs[rcs_info->count].flags =
+// 								I2C_CLIENT_TEN;
+// 			rcs_info->count++;
+// 		}
+// 	} else if (rcs_info->common_irq < 0) {
+// 		if (acpi_dev_resource_interrupt(ares, 0, &r)) {
+// 			rcs_info->common_irq = r.start;
+// 			rcs_info->irq_flags = r.flags;
+// 		}
+// 	}
+
+// 	/* Tell the ACPI core to skip this resource */
+// 	return 1;
+// }
+
+/*
+ * Copy from i2c-core.c
+ * Used to add i2c device to trigger the driver probe
+ */
+static acpi_status atomisp_acpi_i2c_add_device(acpi_handle handle,
+		u32 level, void *data, void **return_value)
+{
+	struct i2c_adapter *adapter = data;
+	struct list_head resource_list;
+	struct i2c_board_info info;
+	struct acpi_device *adev;
+	struct i2c_resource_info rcs_info;
+	struct i2c_client *i2c_client;
+	struct device *dev;
+	int ret = 0;
+	int i;
+
+	if (acpi_bus_get_device(handle, &adev))
+		return AE_OK;
+	if (acpi_bus_get_status(adev) || !adev->status.present)
+		return AE_OK;
+
+	memset(&info, 0, sizeof(info));
+	//info.acpi_node.companion = adev;
+
+	memset(&rcs_info, 0, sizeof(rcs_info));
+	rcs_info.common_irq = -1;
+
+	INIT_LIST_HEAD(&resource_list);
+	//ret = acpi_dev_get_resources(adev, &resource_list,
+	//			     atomisp_acpi_i2c_add_resource, &rcs_info);
+	ret = acpi_dev_get_resources(adev, &resource_list, NULL, NULL);
+	acpi_dev_free_resource_list(&resource_list);
+
+	if (ret < 0)
+		return AE_OK;
+
+	adev->power.flags.ignore_parent = true;
+	info.irq                        = rcs_info.common_irq;
+	//info.irq_flags                  = rcs_info.irq_flags;
+	//info.comp_addr_count            = rcs_info.count;
+
+	for (i = 0; i < ARRAY_SIZE(cht_cam_comp_tab); i++) {
+		if (!strncmp(dev_name(&adev->dev), cht_cam_comp_tab[i].subdev_match_name,
+					strlen(cht_cam_comp_tab[i].subdev_match_name) + 1)) {
+			info.addr  = cht_cam_comp_tab[i].i2c_addr;
+			info.flags = cht_cam_comp_tab[i].flags;
+
+			snprintf(info.type, sizeof(info.type), "%s:%.2x",
+					cht_cam_comp_tab[i].dev_name,
+					info.addr);
+
+			/* Register new i2c device to trigger probe */
+			i2c_client = i2c_new_device(adapter, &info);
+			if (!i2c_client) {
+				if (!i)
+					adev->power.flags.ignore_parent = false;
+
+				dev_err(&adapter->dev,
+					"failed to add I2C device %s from ACPI\n",
+						dev_name(&adev->dev));
+
+				continue;
+			}
+
+			pr_info("%s(): i is %d, adapter->name is %s, client->addr is 0x%.2X,\
+					client->irq is %d, client->name is %s, dev_name is %s.\n",
+					__func__, i, adapter->name, i2c_client->addr, i2c_client->irq,
+					i2c_client->name, cht_cam_comp_tab[i].dev_name);
+
+			/* Check the result of probe() finally */
+			dev = bus_find_device_by_name(&i2c_bus_type, NULL,
+							  cht_cam_comp_tab[i].i2c_dev_name);
+			if (dev && dev->driver) {
+					pr_info("%s(): %s has been registered and probe() successfully!\n",
+						__func__, dev->driver->name);
+			} else {
+				pr_err("%s(): %s doesn't be registered correctly!\n",
+						__func__, cht_cam_comp_tab[i].i2c_dev_name);
+
+				i2c_unregister_device(i2c_client);
+			}
+		}
+	}
+
+	return AE_OK;
+}
+
+/*
+ * Copy from i2c-core.c
+ * Call atomisp_acpi_i2c_add_device() to register i2c device
+ * in acpi namespace
+ */
+static int atomisp_register_acpi_devices(void)
+{
+	int i;
+	int ret = 0;
+	struct i2c_adapter *adapter;
+
+	acpi_handle handle;
+	acpi_status status;
+
+	/* Fixme, in case of diff I2C adapter;
+	 * But it must be spent more time */
+	for (i = I2C_BUS_0; i < I2C_BUS_2; i++) {
+		adapter = i2c_get_adapter(i);
+
+		if (!adapter->dev.parent) {
+			ret = -EINVAL;
+			goto err;
+		}
+
+		handle = ACPI_HANDLE(adapter->dev.parent);
+		if (!handle) {
+			ret = -EINVAL;
+			goto err;
+		}
+
+		status = acpi_walk_namespace(ACPI_TYPE_DEVICE, handle, 1,
+				atomisp_acpi_i2c_add_device, NULL,
+				adapter, NULL);
+		if (ACPI_FAILURE(status)) {
+			dev_err(&adapter->dev, "failed to enumerate I2C slaves!\n");
+			ret = -ENODEV;
+		}
+		}
+
+err:
+	return ret;
+}
+
+/*
+ * Called by atomisp_subdev_probe() the beginning
+ * Register i2c device
+ */
+int camera_init_device(void)
+{
+	return atomisp_register_acpi_devices();
+}
+EXPORT_SYMBOL_GPL(camera_init_device);
+
 const struct atomisp_platform_data *atomisp_get_platform_data(void)
 {
 	return &pdata;
@@ -153,6 +412,8 @@ int atomisp_register_i2c_module(struct v4l2_subdev *subdev,
 	bi->flags = client->flags;
 	bi->addr = client->addr;
 	bi->irq = client->irq;
+	//bi->comp_addr_count = client->comp_addr_count;
+	//bi->irq_flags = client->irq_flags;
 	bi->platform_data = plat_data;
 
 	return 0;
@@ -229,6 +490,21 @@ static const struct gmin_cfg_var t100_vars[] = {
 	{},
 };
 
+static const struct gmin_cfg_var cht_cr_vars[] = {
+	/* For MRD front camera ov2680 with MRD default BIOS */
+	{ "OVTI2680:00_CamClk",          "2" },
+	{ "OVTI2680:00_ClkSrc",          "0" },
+	{ "OVTI2680:00_CsiPort",         "0" },
+	{ "OVTI2680:00_CsiLanes",        "1" },
+
+	/* For MRD rear camera ov2680 with MRD default BIOS */
+	{ "OVTI2680:01_CamClk",          "4" },
+	{ "OVTI2680:01_ClkSrc",          "0" },
+	{ "OVTI2680:01_CsiPort",         "1" },
+	{ "OVTI2680:01_CsiLanes",        "1" },
+	{},
+};
+
 static const struct gmin_cfg_var mrd7_vars[] = {
 	{"INT33F8:00_CamType", "1"},
 	{"INT33F8:00_CsiPort", "1"},
@@ -277,6 +553,7 @@ static const struct {
 } hard_vars[] = {
 	{ "BYT-T FFD8", ffrd8_vars },
 	{ "T100TA", t100_vars },
+	{ "Cherry Trail CR", cht_cr_vars },
 	{ "MRD7", mrd7_vars },
 	{ "ST70408", ecs7_vars },
 	{ "VTA0803", i8880_vars },
@@ -292,14 +569,32 @@ static const struct {
 #define GMIN_PMC_CLK_NAME 14 /* "pmc_plt_clk_[0..5]" */
 static char gmin_pmc_clk_name[GMIN_PMC_CLK_NAME];
 
+static int match_i2c_name(struct device *dev, void *name)
+{
+	return !strcmp(to_i2c_client(dev)->name, (char *)name);
+}
+
+static bool i2c_dev_exists(char *name)
+{
+	return !!bus_find_device(&i2c_bus_type, NULL, name, match_i2c_name);
+}
+
 static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 {
 	int i, ret;
 	struct device *dev;
 	struct i2c_client *client = v4l2_get_subdevdata(subdev);
 
-	if (!pmic_id)
-		pmic_id = PMIC_REGULATOR;
+	if (!pmic_id) {
+		if (i2c_dev_exists(DEVNAME_PMIC_AXP))
+			pmic_id = PMIC_AXP;
+		else if (i2c_dev_exists(DEVNAME_PMIC_TI))
+			pmic_id = PMIC_TI;
+		else if (i2c_dev_exists(DEVNAME_PMIC_CRYSTALCOVE))
+			pmic_id = PMIC_CRYSTALCOVE;
+		else
+			pmic_id = PMIC_REGULATOR;
+	}
 
 	if (!client)
 		return NULL;
@@ -315,6 +610,7 @@ static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 		"gmin: initializing atomisp module subdev data.PMIC ID %d\n",
 		pmic_id);
 
+	dev_info(dev, "suddev name = %s", subdev->name);
 	gmin_subdevs[i].subdev = subdev;
 	gmin_subdevs[i].clock_num = gmin_get_var_int(dev, "CamClk", 0);
 	/*WA:CHT requires XTAL clock as PLL is not stable.*/
@@ -325,6 +621,28 @@ static struct gmin_subdev *gmin_subdev_add(struct v4l2_subdev *subdev)
 	gmin_subdevs[i].gpio0 = gpiod_get_index(dev, NULL, 0, GPIOD_OUT_LOW);
 	gmin_subdevs[i].gpio1 = gpiod_get_index(dev, NULL, 1, GPIOD_OUT_LOW);
 
+        /* DVDD of front camera  */
+        gmin_subdevs[i].eldo1_1p8v       = ELDO1_1P6V;
+        gmin_subdevs[i].eldo1_sel_reg    = ELDO1_SEL_REG;
+        gmin_subdevs[i].eldo1_ctrl_shift = ELDO1_CTRL_SHIFT;
+
+        /* DOVDD of both cameras */
+        gmin_subdevs[i].eldo2_1p8v       = ELDO2_1P8V;
+        gmin_subdevs[i].eldo2_sel_reg    = ELDO2_SEL_REG;
+        gmin_subdevs[i].eldo2_ctrl_shift = ELDO2_CTRL_SHIFT;
+
+#if 0
+        /* AVDD of both cameras */
+        gmin_subdevs[i].aldo1_2p8v       = ALDO1_2P8V;
+        gmin_subdevs[i].aldo1_sel_reg    = ALDO1_SEL_REG;
+        gmin_subdevs[i].aldo1_ctrl_shift = ALDO1_CTRL_SHIFT;
+#endif
+
+        /* DVDD of rear camera */
+        gmin_subdevs[i].fldo2_1p2v       = FLDO2_1P2V;
+        gmin_subdevs[i].fldo2_sel_reg    = FLDO2_SEL_REG;
+        gmin_subdevs[i].fldo2_ctrl_shift = FLDO2_CTRL_SHIFT;
+
 	/* get PMC clock with clock framework */
 	snprintf(gmin_pmc_clk_name,
 		 sizeof(gmin_pmc_clk_name),
@@ -412,6 +730,164 @@ static int gmin_gpio1_ctrl(struct v4l2_subdev *subdev, int on)
 	return -EINVAL;
 }
 
+static int axp_regulator_set(int sel_reg, u8 setting, int ctrl_reg, int shift, bool on)
+{
+	int ret;
+	u8 val;
+	unsigned int tmp = 0;
+
+	struct regmap *axp_regmap;
+	ret = axp20x_get_regmap(&axp_regmap);
+	if (ret) 
+	{
+		pr_err("axp_regulator_set Failed to get axp20x regmap\n");
+		return -ENXIO;
+	}
+
+	ret = regmap_write(axp_regmap, sel_reg, setting);
+	if (ret)
+	{
+		pr_err("axp_regulator_set error %d writing sel_reg.\n", ret);
+		return ret;
+	}
+	ret = regmap_read(axp_regmap, ctrl_reg, &tmp);
+    if (ret < 0)
+    {
+    	pr_err("axp_regulator_set error %d reading ctrl_reg.\n", ret);
+    	return ret;
+    }
+    val = (u8)tmp;
+
+	if (on)
+		val |= (1 << shift);
+	else
+		val &= ~(1 << shift);
+
+	ret = regmap_write(axp_regmap, ctrl_reg, val);
+	if (ret)
+	{
+		pr_err("axp_regulator_set error %d writing ctrl_reg.\n", ret);
+		return ret;
+	}
+
+	pr_info("axp_regulator_set success.\n");
+	return 0;
+}
+
+static int axp_v1p8_on(struct gmin_subdev *gs)
+{
+	int ret;
+	struct i2c_client *client = v4l2_get_subdevdata(gs->subdev);
+	struct device *dev = client ? &client->dev : NULL;
+
+	if (!dev) {
+		pr_err("%s(): client and dev are NULL!\n",
+				__func__);
+		ret = -ENODEV;
+		return ret;
+	}
+
+	/* DOVDD for both camera*/
+	ret = axp_regulator_set(gs->eldo2_sel_reg,
+			gs->eldo2_1p8v,
+			ELDO_CTRL_REG,
+			gs->eldo2_ctrl_shift,
+			true);
+
+	/* This sleep comes out of the gc2235 driver, which is the
+	 * only one I currently see that wants to set both 1.8v rails. */
+	usleep_range(110, 150);
+
+	pr_info("axp_v1p8_on %s %08X",
+		dev->driver->acpi_match_table->id, client->addr);
+
+	/* DVDD of rear camera */
+	if (!strcmp(dev->driver->acpi_match_table->id,"INT3477")
+	 ||!strcmp(dev->driver->acpi_match_table->id,"OVTI5670"))
+	{
+		ret |= axp_regulator_set(gs->fldo2_sel_reg,
+				gs->fldo2_1p2v,
+				FLDO_CTRL_REG,
+				gs->fldo2_ctrl_shift,
+				true);
+	}
+	
+    // XXOV2680 00000010
+    // XXOV2680 00000036
+	/* DVDD of front camera */
+	if ((!strcmp(dev->driver->acpi_match_table->id,"OVTI2680") && (client->addr == 0x10)) ||
+	     !strcmp(dev->driver->acpi_match_table->id,"GCTI2355") ||
+	     !strcmp(dev->driver->acpi_match_table->id,"INT0310"))
+		ret |= axp_regulator_set(gs->eldo1_sel_reg,
+				gs->eldo1_1p8v,
+				ELDO_CTRL_REG,
+				gs->eldo1_ctrl_shift,
+				true);
+
+	return ret;
+}
+
+static int axp_v1p8_off(struct gmin_subdev *gs)
+{
+	int ret;
+	struct i2c_client *client = v4l2_get_subdevdata(gs->subdev);
+	struct device *dev = client ? &client->dev : NULL;
+
+	if (!dev) {
+		pr_err("%s(): client and dev are NULL!\n",
+				__func__);
+		ret = -ENODEV;
+		return ret;
+	}
+
+	/* DOVDD for both camera*/
+	ret = axp_regulator_set(gs->eldo2_sel_reg,
+			gs->eldo2_1p8v,
+			ELDO_CTRL_REG,
+			gs->eldo2_ctrl_shift,
+			false);
+
+	/* DVDD of front camera */
+	if ((!strcmp(dev->driver->acpi_match_table->id,"OVTI2680") && (client->addr == 0x10)) ||
+			!strcmp(dev->driver->acpi_match_table->id,"GCTI2355")||
+				!strcmp(dev->driver->acpi_match_table->id,"INT0310"))
+		ret |= axp_regulator_set(gs->eldo1_sel_reg,
+				gs->eldo1_1p8v,
+				ELDO_CTRL_REG,
+				gs->eldo1_ctrl_shift,
+				false);
+
+	/* DVDD of rear camera */
+	if (!strcmp(dev->driver->acpi_match_table->id,"INT3477")
+	  ||!strcmp(dev->driver->acpi_match_table->id,"OVTI5670")) 
+	{
+			ret |= axp_regulator_set(gs->fldo2_sel_reg,
+					gs->fldo2_1p2v,
+					FLDO_CTRL_REG,
+					gs->fldo2_ctrl_shift,
+					true);
+	}
+
+	return ret;
+}
+
+
+static int axp_v2p8_on(void)
+{
+	int ret;
+	/* AVDD */
+	ret = axp_regulator_set(ALDO1_SEL_REG, ALDO1_2P8V, ALDO1_CTRL3_REG,
+		ALDO1_CTRL3_SHIFT, true);
+	return ret;
+}
+
+static int axp_v2p8_off(void)
+{
+	/* AVDD */
+	return axp_regulator_set(ALDO1_SEL_REG, ALDO1_2P8V, ALDO1_CTRL3_REG,
+				 ALDO1_CTRL3_SHIFT, false);
+}
+
 static int gmin_v1p2_ctrl(struct v4l2_subdev *subdev, int on)
 {
 	struct gmin_subdev *gs = find_gmin_subdev(subdev);
@@ -465,6 +941,32 @@ static int gmin_v1p8_ctrl(struct v4l2_subdev *subdev, int on)
 			return regulator_disable(gs->v1p8_reg);
 	}
 
+	if (pmic_id == PMIC_AXP) {
+		pr_info("gmin_v1p8_ctrl PMIC_AXP.\n");
+		if (on)
+			return axp_v1p8_on(gs);
+		else
+			return axp_v1p8_off(gs);
+	}
+
+	// if (pmic_id == PMIC_TI) {
+	// 	int val = on ? LDO_1P8V_ON : LDO_1P8V_OFF;
+	// 	int ret = intel_soc_pmic_writeb(LDO10_REG, val);
+	// 	if (!ret)
+	// 		ret = intel_soc_pmic_writeb(LDO11_REG, val);
+	// 	return ret;
+	// }
+
+	// if (pmic_id == PMIC_CRYSTALCOVE) {
+	// 	if (on)
+	// 		return intel_soc_pmic_writeb(CRYSTAL_1P8V_REG,
+	// 							CRYSTAL_ON);
+	// 	else
+	// 		return intel_soc_pmic_writeb(CRYSTAL_1P8V_REG,
+	// 							CRYSTAL_OFF);
+	// }
+
+	pr_err("gmin_v1p8_ctrl failed.\n");
 	return -EINVAL;
 }
 
@@ -501,6 +1003,30 @@ static int gmin_v2p8_ctrl(struct v4l2_subdev *subdev, int on)
 			return regulator_disable(gs->v2p8_reg);
 	}
 
+	if (pmic_id == PMIC_AXP) {
+		if (on)
+			return axp_v2p8_on();
+		else
+			return axp_v2p8_off();
+	}
+
+	/*	
+	if (pmic_id == PMIC_TI) {
+		if (on)
+			return intel_soc_pmic_writeb(LDO9_REG, LDO_2P8V_ON);
+		else
+			return intel_soc_pmic_writeb(LDO9_REG, LDO_2P8V_OFF);
+	}
+
+	if (pmic_id == PMIC_CRYSTALCOVE) {
+		if (on)
+			return intel_soc_pmic_writeb(CRYSTAL_2P8V_REG, CRYSTAL_ON);
+		else
+			return intel_soc_pmic_writeb(CRYSTAL_2P8V_REG, CRYSTAL_OFF);
+	}
+	*/
+
+	pr_err("gmin_v2p8_ctrl failed.\n");
 	return -EINVAL;
 }
 
